"""
This type stub file was generated by pyright.
"""

from oauth2client import _pure_python_crypt

"""Crypto-related routines for oauth2client."""
RsaSigner = _pure_python_crypt.RsaSigner
RsaVerifier = _pure_python_crypt.RsaVerifier
CLOCK_SKEW_SECS = ...
AUTH_TOKEN_LIFETIME_SECS = ...
MAX_TOKEN_LIFETIME_SECS = ...
logger = ...
class AppIdentityError(Exception):
    """Error to indicate crypto failure."""
    ...


OpenSSLSigner = ...
OpenSSLVerifier = ...
pkcs12_key_as_pem = ...
PyCryptoSigner = ...
PyCryptoVerifier = ...
if OpenSSLSigner:
    Signer = ...
    Verifier = ...
else:
    Signer = ...
    Verifier = ...
    Signer = RsaSigner
    Verifier = RsaVerifier
def make_signed_jwt(signer, payload, key_id=...): # -> bytes:
    """Make a signed JWT.

    See http://self-issued.info/docs/draft-jones-json-web-token.html.

    Args:
        signer: crypt.Signer, Cryptographic signer.
        payload: dict, Dictionary of data to convert to JSON and then sign.
        key_id: string, (Optional) Key ID header.

    Returns:
        string, The JWT for the payload.
    """
    ...

def verify_signed_jwt_with_certs(jwt, certs, audience=...): # -> Any:
    """Verify a JWT against public certs.

    See http://self-issued.info/docs/draft-jones-json-web-token.html.

    Args:
        jwt: string, A JWT.
        certs: dict, Dictionary where values of public keys in PEM format.
        audience: string, The audience, 'aud', that this JWT should contain. If
                  None then the JWT's 'aud' parameter is not verified.

    Returns:
        dict, The deserialized JSON payload in the JWT.

    Raises:
        AppIdentityError: if any checks are failed.
    """
    ...

