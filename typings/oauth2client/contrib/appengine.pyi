"""
This type stub file was generated by pyright.
"""

import webapp2 as webapp
from google.appengine.ext import db
from oauth2client import _helpers, client
from oauth2client.contrib import _appengine_ndb

"""Utilities for Google App Engine

Utilities for making it easier to use OAuth 2.0 on Google App Engine.
"""
logger = ...
OAUTH2CLIENT_NAMESPACE = ...
XSRF_MEMCACHE_ID = ...
if _appengine_ndb is None:
    CredentialsNDBModel = ...
    CredentialsNDBProperty = ...
    FlowNDBProperty = ...
    _NDB_KEY = ...
    _NDB_MODEL = ...
    SiteXsrfSecretKeyNDB = ...
else:
    CredentialsNDBModel = ...
    CredentialsNDBProperty = ...
    FlowNDBProperty = ...
    _NDB_KEY = ...
    _NDB_MODEL = ...
    SiteXsrfSecretKeyNDB = ...
class SiteXsrfSecretKey(db.Model):
    """Storage for the sites XSRF secret key.

    There will only be one instance stored of this model, the one used for the
    site.
    """
    secret = ...


def xsrf_secret_key(): # -> str:
    """Return the secret key for use for XSRF protection.

    If the Site entity does not have a secret key, this method will also create
    one and persist it.

    Returns:
        The secret key.
    """
    ...

class AppAssertionCredentials(client.AssertionCredentials):
    """Credentials object for App Engine Assertion Grants

    This object will allow an App Engine application to identify itself to
    Google and other OAuth 2.0 servers that can verify assertions. It can be
    used for the purpose of accessing data stored under an account assigned to
    the App Engine application itself.

    This credential does not require a flow to instantiate because it
    represents a two legged flow, and therefore has all of the required
    information to generate and refresh its own access tokens.
    """
    @_helpers.positional(2)
    def __init__(self, scope, **kwargs) -> None:
        """Constructor for AppAssertionCredentials

        Args:
            scope: string or iterable of strings, scope(s) of the credentials
                   being requested.
            **kwargs: optional keyword args, including:
            service_account_id: service account id of the application. If None
                                or unspecified, the default service account for
                                the app is used.
        """
        ...
    
    @classmethod
    def from_json(cls, json_data): # -> AppAssertionCredentials:
        ...
    
    @property
    def serialization_data(self):
        ...
    
    def create_scoped_required(self): # -> bool:
        ...
    
    def create_scoped(self, scopes): # -> AppAssertionCredentials:
        ...
    
    def sign_blob(self, blob):
        """Cryptographically sign a blob (of bytes).

        Implements abstract method
        :meth:`oauth2client.client.AssertionCredentials.sign_blob`.

        Args:
            blob: bytes, Message to be signed.

        Returns:
            tuple, A pair of the private key ID used to sign the blob and
            the signed contents.
        """
        ...
    
    @property
    def service_account_email(self):
        """Get the email for the current service account.

        Returns:
            string, The email associated with the Google App Engine
            service account.
        """
        ...
    


class FlowProperty(db.Property):
    """App Engine datastore Property for Flow.

    Utility property that allows easy storage and retrieval of an
    oauth2client.Flow
    """
    data_type = client.Flow
    def get_value_for_datastore(self, model_instance):
        ...
    
    def make_value_from_datastore(self, value): # -> Any | None:
        ...
    
    def validate(self, value):
        ...
    
    def empty(self, value): # -> bool:
        ...
    


class CredentialsProperty(db.Property):
    """App Engine datastore Property for Credentials.

    Utility property that allows easy storage and retrieval of
    oauth2client.Credentials
    """
    data_type = client.Credentials
    def get_value_for_datastore(self, model_instance):
        ...
    
    def make_value_from_datastore(self, value): # -> Any | None:
        ...
    
    def validate(self, value): # -> Credentials:
        ...
    


class StorageByKeyName(client.Storage):
    """Store and retrieve a credential to and from the App Engine datastore.

    This Storage helper presumes the Credentials have been stored as a
    CredentialsProperty or CredentialsNDBProperty on a datastore model class,
    and that entities are stored by key_name.
    """
    @_helpers.positional(4)
    def __init__(self, model, key_name, property_name, cache=..., user=...) -> None:
        """Constructor for Storage.

        Args:
            model: db.Model or ndb.Model, model class
            key_name: string, key name for the entity that has the credentials
            property_name: string, name of the property that is a
                           CredentialsProperty or CredentialsNDBProperty.
            cache: memcache, a write-through cache to put in front of the
                   datastore. If the model you are using is an NDB model, using
                   a cache will be redundant since the model uses an instance
                   cache and memcache for you.
            user: users.User object, optional. Can be used to grab user ID as a
                  key_name if no key name is specified.
        """
        ...
    
    @db.non_transactional(allow_existing=True)
    def locked_get(self): # -> Any | None:
        """Retrieve Credential from datastore.

        Returns:
            oauth2client.Credentials
        """
        ...
    
    @db.non_transactional(allow_existing=True)
    def locked_put(self, credentials): # -> None:
        """Write a Credentials to the datastore.

        Args:
            credentials: Credentials, the credentials to store.
        """
        ...
    
    @db.non_transactional(allow_existing=True)
    def locked_delete(self): # -> None:
        """Delete Credential from datastore."""
        ...
    


class CredentialsModel(db.Model):
    """Storage for OAuth 2.0 Credentials

    Storage of the model is keyed by the user.user_id().
    """
    credentials = ...


class OAuth2Decorator:
    """Utility for making OAuth 2.0 easier.

    Instantiate and then use with oauth_required or oauth_aware
    as decorators on webapp.RequestHandler methods.

    ::

        decorator = OAuth2Decorator(
            client_id='837...ent.com',
            client_secret='Qh...wwI',
            scope='https://www.googleapis.com/auth/plus')

        class MainHandler(webapp.RequestHandler):
            @decorator.oauth_required
            def get(self):
                http = decorator.http()
                # http is authorized with the user's Credentials and can be
                # used in API calls

    """
    def set_credentials(self, credentials): # -> None:
        ...
    
    def get_credentials(self): # -> Any | None:
        """A thread local Credentials object.

        Returns:
            A client.Credentials object, or None if credentials hasn't been set
            in this thread yet, which may happen when calling has_credentials
            inside oauth_aware.
        """
        ...
    
    credentials = ...
    def set_flow(self, flow): # -> None:
        ...
    
    def get_flow(self): # -> Any | None:
        """A thread local Flow object.

        Returns:
            A credentials.Flow object, or None if the flow hasn't been set in
            this thread yet, which happens in _create_flow() since Flows are
            created lazily.
        """
        ...
    
    flow = ...
    @_helpers.positional(4)
    def __init__(self, client_id, client_secret, scope, auth_uri=..., token_uri=..., revoke_uri=..., user_agent=..., message=..., callback_path=..., token_response_param=..., _storage_class=..., _credentials_class=..., _credentials_property_name=..., **kwargs) -> None:
        """Constructor for OAuth2Decorator

        Args:
            client_id: string, client identifier.
            client_secret: string client secret.
            scope: string or iterable of strings, scope(s) of the credentials
                   being requested.
            auth_uri: string, URI for authorization endpoint. For convenience
                      defaults to Google's endpoints but any OAuth 2.0 provider
                      can be used.
            token_uri: string, URI for token endpoint. For convenience defaults
                       to Google's endpoints but any OAuth 2.0 provider can be
                       used.
            revoke_uri: string, URI for revoke endpoint. For convenience
                        defaults to Google's endpoints but any OAuth 2.0
                        provider can be used.
            user_agent: string, User agent of your application, default to
                        None.
            message: Message to display if there are problems with the
                     OAuth 2.0 configuration. The message may contain HTML and
                     will be presented on the web interface for any method that
                     uses the decorator.
            callback_path: string, The absolute path to use as the callback
                           URI. Note that this must match up with the URI given
                           when registering the application in the APIs
                           Console.
            token_response_param: string. If provided, the full JSON response
                                  to the access token request will be encoded
                                  and included in this query parameter in the
                                  callback URI. This is useful with providers
                                  (e.g. wordpress.com) that include extra
                                  fields that the client may want.
            _storage_class: "Protected" keyword argument not typically provided
                            to this constructor. A storage class to aid in
                            storing a Credentials object for a user in the
                            datastore. Defaults to StorageByKeyName.
            _credentials_class: "Protected" keyword argument not typically
                                provided to this constructor. A db or ndb Model
                                class to hold credentials. Defaults to
                                CredentialsModel.
            _credentials_property_name: "Protected" keyword argument not
                                        typically provided to this constructor.
                                        A string indicating the name of the
                                        field on the _credentials_class where a
                                        Credentials object will be stored.
                                        Defaults to 'credentials'.
            **kwargs: dict, Keyword arguments are passed along as kwargs to
                      the OAuth2WebServerFlow constructor.
        """
        ...
    
    def oauth_required(self, method): # -> Callable[..., Any | None]:
        """Decorator that starts the OAuth 2.0 dance.

        Starts the OAuth dance for the logged in user if they haven't already
        granted access for this application.

        Args:
            method: callable, to be decorated method of a webapp.RequestHandler
                    instance.
        """
        ...
    
    def oauth_aware(self, method): # -> Callable[..., Any | None]:
        """Decorator that sets up for OAuth 2.0 dance, but doesn't do it.

        Does all the setup for the OAuth dance, but doesn't initiate it.
        This decorator is useful if you want to create a page that knows
        whether or not the user has granted access to this application.
        From within a method decorated with @oauth_aware the has_credentials()
        and authorize_url() methods can be called.

        Args:
            method: callable, to be decorated method of a webapp.RequestHandler
                    instance.
        """
        ...
    
    def has_credentials(self): # -> bool:
        """True if for the logged in user there are valid access Credentials.

        Must only be called from with a webapp.RequestHandler subclassed method
        that had been decorated with either @oauth_required or @oauth_aware.
        """
        ...
    
    def authorize_url(self): # -> str:
        """Returns the URL to start the OAuth dance.

        Must only be called from with a webapp.RequestHandler subclassed method
        that had been decorated with either @oauth_required or @oauth_aware.
        """
        ...
    
    def http(self, *args, **kwargs): # -> Any:
        """Returns an authorized http instance.

        Must only be called from within an @oauth_required decorated method, or
        from within an @oauth_aware decorated method where has_credentials()
        returns True.

        Args:
            *args: Positional arguments passed to httplib2.Http constructor.
            **kwargs: Positional arguments passed to httplib2.Http constructor.
        """
        ...
    
    @property
    def callback_path(self): # -> str:
        """The absolute path where the callback will occur.

        Note this is the absolute path, not the absolute URI, that will be
        calculated by the decorator at runtime. See callback_handler() for how
        this should be used.

        Returns:
            The callback path as a string.
        """
        ...
    
    def callback_handler(self): # -> type[OAuth2Handler]:
        """RequestHandler for the OAuth 2.0 redirect callback.

        Usage::

            app = webapp.WSGIApplication([
                ('/index', MyIndexHandler),
                ...,
                (decorator.callback_path, decorator.callback_handler())
            ])

        Returns:
            A webapp.RequestHandler that handles the redirect back from the
            server during the OAuth 2.0 dance.
        """
        class OAuth2Handler(webapp.RequestHandler):
            """Handler for the redirect_uri of the OAuth 2.0 dance."""
            ...
        
        
    
    def callback_application(self):
        """WSGI application for handling the OAuth 2.0 redirect callback.

        If you need finer grained control use `callback_handler` which returns
        just the webapp.RequestHandler.

        Returns:
            A webapp.WSGIApplication that handles the redirect back from the
            server during the OAuth 2.0 dance.
        """
        ...
    


class OAuth2DecoratorFromClientSecrets(OAuth2Decorator):
    """An OAuth2Decorator that builds from a clientsecrets file.

    Uses a clientsecrets file as the source for all the information when
    constructing an OAuth2Decorator.

    ::

        decorator = OAuth2DecoratorFromClientSecrets(
            os.path.join(os.path.dirname(__file__), 'client_secrets.json')
            scope='https://www.googleapis.com/auth/plus')

        class MainHandler(webapp.RequestHandler):
            @decorator.oauth_required
            def get(self):
                http = decorator.http()
                # http is authorized with the user's Credentials and can be
                # used in API calls

    """
    @_helpers.positional(3)
    def __init__(self, filename, scope, message=..., cache=..., **kwargs) -> None:
        """Constructor

        Args:
            filename: string, File name of client secrets.
            scope: string or iterable of strings, scope(s) of the credentials
                   being requested.
            message: string, A friendly string to display to the user if the
                     clientsecrets file is missing or invalid. The message may
                     contain HTML and will be presented on the web interface
                     for any method that uses the decorator.
            cache: An optional cache service client that implements get() and
                   set()
            methods. See clientsecrets.loadfile() for details.
            **kwargs: dict, Keyword arguments are passed along as kwargs to
                      the OAuth2WebServerFlow constructor.
        """
        ...
    


@_helpers.positional(2)
def oauth2decorator_from_clientsecrets(filename, scope, message=..., cache=...): # -> OAuth2DecoratorFromClientSecrets:
    """Creates an OAuth2Decorator populated from a clientsecrets file.

    Args:
        filename: string, File name of client secrets.
        scope: string or list of strings, scope(s) of the credentials being
               requested.
        message: string, A friendly string to display to the user if the
                 clientsecrets file is missing or invalid. The message may
                 contain HTML and will be presented on the web interface for
                 any method that uses the decorator.
        cache: An optional cache service client that implements get() and set()
               methods. See clientsecrets.loadfile() for details.

    Returns: An OAuth2Decorator
    """
    ...

